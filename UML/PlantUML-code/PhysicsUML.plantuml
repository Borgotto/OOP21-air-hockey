@startuml Physics2D-implement
!theme plain

interface Physics2D{
    + update() : void
    + getWorld() : World
    + addRigidBody( rigidBody : RigidBody )
    + resetWorld() : void
    + deleteAllBodies() : void
}

class Physics2DImpl{
    gravity : Vec2
    world : World
    rigidBodyList : ArrayList<RigidBody>
    physicsTime : float
    velocityIterations : float
    positionIterations : float
}

class Physics2DImpl implements Physics2D

@enduml

@startuml RigidBody-interface-tree
!theme plain

interface RigidBody{
    + getBody() : Body
    + getPosition() : Vec2
    + setPosition( pos : Vec2) : void
    + resetBodyPos() : void
}

interface ArenaBody{
    + getWidth() : float
    + getHeight() : float
    + getGoalSize() : float
}

interface PlayerBody{
    + getRadius() : float
}

interface PuckBody{
    + getNextPos() : Vec2
    + getRadius() : float
}

interface ArenaBody extends RigidBody
interface PlayerBody extends RigidBody
interface PuckBody extends RigidBody

@enduml

@startuml RigidBody-implement
!theme plain

interface RigidBody{
    + getBody() : Body
    + getPosition() : Vec2
    + setPosition( pos : Vec2 ) : void
    + resetBodyPos() : void
}

abstract class RigidBodyImpl{
    bodyTypeDef : BodyTypeDef
    startPositionDef : Vec2
    linearDampingDef : float
    bodyDef : BodyDef
    body : Body

    # configBodyDef() : void
    # resetBodySpeed() : void
    # getBodyType() : BodyType
    # setBodyType( bodyTypeDef : BodyType ) : void
    # getStartPositionDef() : Vec2
    # setStartPositionDef( pos : Vec2 ) : void
    # getLinearDampingDef() : void
    # setLinearDampingDef( linearDampingDef : float ) : void
    # getBodyDef() : BodyDef
    # setBodyDef( bodyDef : BodyDef ) : void
    # setBody( body : Body ) : void
}

class RigidBodyImpl implements RigidBody

@enduml

@startuml ArenaBody-implement
!theme plain

interface RigidBody{
    + getBody() : Body
    + getPosition() : Vec2
    + setPosition( pos : Vec2 ) : void
    + resetBodyPos() : void
}

interface ArenaBody{
    + getWidth() : float
    + getHeight() : float
    + getGoalWidth() : float
}

abstract class RigidBodyImpl{
    bodyTypeDef : BodyTypeDef
    startPositionDef : Vec2
    linearDampingDef : float
    bodyDef : BodyDef
    body : Body

    # configBodyDef() : void
    # resetBodySpeed() : void
    # getBodyType() : BodyType
    # setBodyType( bodyTypeDef : BodyType ) : void
    # getStartPositionDef() : Vec2
    # setStartPositionDef( pos : Vec2 ) : void
    # getLinearDampingDef() : void
    # setLinearDampingDef( linearDampingDef : float ) : void
    # getBodyDef() : BodyDef
    # setBodyDef( bodyDef : BodyDef ) : void
    # setBody( body : Body ) : void
}

class ArenaBodyImpl{
    width : float
    height : float
    goalWidth : float
}

ArenaBody -R-|> RigidBody
RigidBodyImpl .U.|> RigidBody
ArenaBodyImpl .U.|> ArenaBody
ArenaBodyImpl -R-|> RigidBodyImpl

@enduml

@startuml PlayerBody-implement
!theme plain

interface RigidBody{
    + getBody() : Body
    + getPosition() : Vec2
    + setPosition( pos : Vec2 ) : void
    + resetBodyPos() : void
}

interface PlayerBody{
    + getRadius() : float
}

abstract class RigidBodyImpl{
    bodyTypeDef : BodyTypeDef
    startPositionDef : Vec2
    linearDampingDef : float
    bodyDef : BodyDef
    body : Body

    # configBodyDef() : void
    # resetBodySpeed() : void
    # getBodyType() : BodyType
    # setBodyType( bodyTypeDef : BodyType ) : void
    # getStartPositionDef() : Vec2
    # setStartPositionDef( pos : Vec2 ) : void
    # getLinearDampingDef() : void
    # setLinearDampingDef( linearDampingDef : float ) : void
    # getBodyDef() : BodyDef
    # setBodyDef( bodyDef : BodyDef ) : void
    # setBody( body : Body ) : void
}

class PlayerBodyImpl{
    radius : float
}

PlayerBody -R-|> RigidBody
RigidBodyImpl .U.|> RigidBody
PlayerBodyImpl .U.|> PlayerBody
PlayerBodyImpl -R-|> RigidBodyImpl

@enduml

@startuml PuckBody-implement
!theme plain

interface RigidBody{
    + getBody() : Body
    + getPosition() : Vec2
    + setPosition( pos : Vec2 ) : void
    + resetBodyPos() : void
}

interface PuckBody{
    + getNextPos() : Vec2
    + getRadius() : float
}

abstract class RigidBodyImpl{
    bodyTypeDef : BodyTypeDef
    startPositionDef : Vec2
    linearDampingDef : float
    bodyDef : BodyDef
    body : Body

    # configBodyDef() : void
    # resetBodySpeed() : void
    # getBodyType() : BodyType
    # setBodyType( bodyTypeDef : BodyType ) : void
    # getStartPositionDef() : Vec2
    # setStartPositionDef( pos : Vec2 ) : void
    # getLinearDampingDef() : void
    # setLinearDampingDef( linearDampingDef : float ) : void
    # getBodyDef() : BodyDef
    # setBodyDef( bodyDef : BodyDef ) : void
    # setBody( body : Body ) : void
}

class PuckBodyImpl{
    radius : float
}

PuckBody -R-|> RigidBody
RigidBodyImpl .U.|> RigidBody
PuckBodyImpl .U.|> PuckBody
PuckBodyImpl -R-|> RigidBodyImpl

@enduml
